/-
Copyright (c) 2023 Andrea Laretto. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrea Laretto
-/
import Mathlib.CategoryTheory.Products.Bifunctor

/-!
# Dinatural transformations

Dinatural transformations are special kinds of transformations between
functors `F G : C·µí·µñ √ó C ‚•§ D` which depend both covariantly and contravariantly
on the same category (also known as difunctors).

A dinatural transformation is a family of morphisms given only on *the diagonal* of the two
functors, and is such that a certain naturality hexagon commutes.

Note that dinatural transformations cannot be composed with each other (since the outer
hexagon does not commute in general), but can still be "pre/post-composed" with
ordinary natural transformations.
-/

namespace CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

open Opposite Bifunctor
open scoped Prod

/-- Dinatural transformations between two (di)functors. -/
structure DinatTrans (F G : C·µí·µñ √ó C ‚•§ D) : Type max u‚ÇÅ v‚ÇÇ where
  /-- The component of a natural transformation. -/
  app (X : C) : F.obj ‚ü®op X, X‚ü© ‚ü∂ G.obj ‚ü®op X, X‚ü©
  /-- The commutativity square for a given morphism. -/
  dinaturality {X Y : C} (f : X ‚ü∂ Y) :
      F.map (f.op √ó‚Çò ùüô _) ‚â´ app X ‚â´ G.map (ùüô (op _) √ó‚Çò f) =
      F.map (ùüô (op _) √ó‚Çò f) ‚â´ app Y ‚â´ G.map (f.op √ó‚Çò ùüô _) :=
        by aesop_cat

attribute [reassoc (attr := simp)] DinatTrans.dinaturality

/-- Notation for dinatural transformations. -/
infixr:50 " ‚§û " => DinatTrans

/-- Opposite of a difunctor. -/
@[simps!]
def Functor.diop (F : C·µí·µñ √ó C ‚•§ D) : C·µí·µñ √ó C ‚•§ D·µí·µñ :=
  prod (ùü≠ C·µí·µñ) (opOp C) ‚ãô flip (biop F)

variable {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] {F : Type u‚ÇÑ} [Category.{v‚ÇÑ} F]

variable {F G H : C·µí·µñ √ó C ‚•§ D}

/-- Post-composition with a natural transformation. -/
@[simps]
def DinatTrans.compNatTrans (Œ¥ : F ‚§û G) (Œ± : G ‚ü∂ H) : F ‚§û H where
  app X := Œ¥.app X ‚â´ Œ±.app (op X, X)
  dinaturality f := by simp; rw [‚ÜêŒ±.naturality, reassoc_of% Œ¥.dinaturality f,‚ÜêŒ±.naturality]

/-- Pre-composition with a natural transformation. -/
@[simps]
def DinatTrans.precompNatTrans (Œ¥ : G ‚§û H) (Œ± : F ‚ü∂ G) : F ‚§û H where
  app X := Œ±.app (op X, X) ‚â´ Œ¥.app X
  dinaturality {X Y} f := by simp only [Category.assoc, NatTrans.naturality_assoc, dinaturality]

/-- Opposite of a dinatural transformation. -/
@[simps]
def DinatTrans.op (Œ± : F ‚§û G) : G.diop ‚§û F.diop where
  app X := by simp; exact (Œ±.app X).op
  dinaturality f := Quiver.Hom.unop_inj <| by
    convert Œ±.dinaturality f using 1 <;> exact Category.assoc _ _ _

end CategoryTheory
