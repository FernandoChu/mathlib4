/-
Copyright (c) 2017 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stephen Morgan, Kim Morrison
-/
import Mathlib.CategoryTheory.Products.Basic

/-!
# Lemmas about functors out of product categories.
-/


open CategoryTheory Opposite

universe vโ vโ vโ vโ uโ uโ uโ uโ
variable {C : Type uโ} {D : Type uโ} {E : Type uโ} {F : Type uโ}
variable [Category.{vโ} C] [Category.{vโ} D] [Category.{vโ} E] [Category.{vโ} F]

namespace CategoryTheory.Bifunctor

open scoped Prod

@[simp]
theorem map_id (F : C ร D โฅค E) (X : C) (Y : D) :
    F.map ((๐ X) รโ (๐ Y)) = ๐ (F.obj (X, Y)) :=
  F.map_id (X, Y)

@[simp]
theorem map_id_comp (F : C ร D โฅค E) (W : C) {X Y Z : D} (f : X โถ Y) (g : Y โถ Z) :
    F.map (๐ W รโ (f โซ g)) = F.map (๐ W รโ f) โซ F.map (๐ W รโ g) := by
  rw [โ Functor.map_comp, prod_comp, Category.comp_id]

@[simp]
theorem map_comp_id (F : C ร D โฅค E) (X Y Z : C) (W : D) (f : X โถ Y) (g : Y โถ Z) :
    F.map ((f โซ g) รโ ๐ W) = F.map (f รโ ๐ W) โซ F.map (g รโ ๐ W) := by
  rw [โ Functor.map_comp, prod_comp, Category.comp_id]

@[simp]
theorem diagonal (F : C ร D โฅค E) (X X' : C) (f : X โถ X') (Y Y' : D) (g : Y โถ Y') :
    F.map (๐ X รโ g) โซ F.map (f รโ ๐ Y') = F.map (f รโ g) := by
  rw [โ Functor.map_comp, prod_comp, Category.id_comp, Category.comp_id]

@[simp]
theorem diagonal' (F : C ร D โฅค E) (X X' : C) (f : X โถ X') (Y Y' : D) (g : Y โถ Y') :
    F.map (f รโ ๐ Y) โซ F.map (๐ X' รโ g) = F.map (f รโ g) := by
  rw [โ Functor.map_comp, prod_comp, Category.id_comp, Category.comp_id]

/-- Opposite of a bifunctor -/
@[simps!]
def biop (F : C ร D โฅค E) : Cแตแต ร Dแตแต โฅค Eแตแต :=
  (prodOpEquiv C).inverse โ F.op

/-- Flipping of arguments of a bifunctor -/
@[simps!]
def flip (F : C ร D โฅค E) : D ร C โฅค E :=
  Prod.swap D C โ F

end CategoryTheory.Bifunctor

namespace CategoryTheory.Functor

/-- Opposite of a bifunctor. -/
@[simps!]
def biop (F : Cแตแต โฅค D โฅค E) : C โฅค Dแตแต โฅค Eแตแต := F.rightOp โ Functor.opHom _ _

end CategoryTheory.Functor

namespace CategoryTheory

variable {Cโ Cโ : C} {Dโ Dโ : D} {Eโ Eโ : E}

/-- Action of two-variable functors on objects. -/
abbrev Functor.objโ (H : C โฅค D โฅค E) (A : C) (B : D) : E := (H.obj A).obj B

/-- Action of three-variable functors on objects. -/
abbrev Functor.objโ (H : C โฅค D โฅค E โฅค F) (A : C) (B : D) (C : E) : F :=
  ((H.obj A).obj B).obj C

/-- Apply a natural transformation between bifunctors to two objects. -/
abbrev NatTrans.appโ {F G : C โฅค D โฅค E} (ฮฑ : NatTrans F G) (X : C) (Y : D) :
    F.objโ X Y โถ G.objโ X Y :=
  (ฮฑ.app X).app Y

/-- Apply a natural transformation between bifunctors in three variables to three objects. -/
abbrev NatTrans.appโ {H G : C โฅค D โฅค E โฅค F} (ฮฑ : NatTrans H G) (X : C) (Y : D) (Z : E) :
    H.objโ X Y Z โถ G.objโ X Y Z :=
  ((ฮฑ.app X).app Y).app Z

/- Natural transformations between functors with many variables. -/
namespace NatTrans

@[reassoc, simp]
lemma comp_appโ {H G K : C โฅค D โฅค E} (ฮฑ : H โถ G) (ฮฒ : G โถ K) (X : C) (Y : D) :
    (ฮฑ โซ ฮฒ).appโ X Y = ฮฑ.appโ X Y โซ ฮฒ.appโ X Y := rfl

@[reassoc, simp]
lemma comp_appโ {H G K : C โฅค D โฅค E โฅค F} (ฮฑ : H โถ G) (ฮฒ : G โถ K) (X : C) (Y : D)
    (Z : E) : (ฮฑ โซ ฮฒ).appโ X Y Z = ฮฑ.appโ X Y Z โซ ฮฒ.appโ X Y Z := rfl

end NatTrans

end CategoryTheory
